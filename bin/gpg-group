#!/bin/bash
#
# Interactively manage GnuPG groups
#

##################################################
# Global State
##################################################
group_names=()
member_lists=()

##################################################
# User Interface
##################################################

show_help() {
self=${0##*/}
cat << EOF
NAME
    $self - interactively manage GnuPG groups
USAGE
    $self --help
    $self groups
    $self show [-f] NAME
    $self edit NAME
    $self new NAME

DESCRIPTION
    Simple interactive interface for managing GnuPG groups via GPGCONF(1)

    -h  display this help and exit

COMMANDS

    $self groups
        list all group names defined in config

    $self show [-f] NAME
        show members of a group
        -f      show fingerprints instead of uids
        NAME    name of group to show

    $self edit NAME
        launch interactive editor for group. See EDITING GROUPS
        NAME    name of group to edit

    $self new NAME
        create a new group and lauch interactive editor.
        NAME    name of group to create

EDITING GROUPS
    The initial editor screen displays the name of the group you are currently
    editing, the number of keys currently associated with the group, a
    SELECT(3P) menu consisting of all the valid UID's represented by the
    associated fingerprints, and a menu describing valid actions. An asterisk
    (*) after the group name indicates that there are currently unsaved changes
    to the group.

    Entering the number of a UID from the select menu will remove that key from
    the group. Other valid actions are:

    A - Add a key to the group
        When adding a key to a group, you will first be prompted for a string to
        search for. This is passed to GPG(1) --list-keys. Only valid keys that
        are not already in the group will be displayed. You will then be shown
        another select menu displaying the UID's of the resulting keys. Entering
        the number of a displayed UID will add the keys fingerprint to the
        group. Your changes must still be saved.

    S - Save all changes to groups
        Any actions taken (add, remove, copy, delete) only alter in the in
        memory state of the group aliases, and must be saved back to the
        configuration file. Saving will attempt to persist the changes using
        gpgconf and revert to the previous state if gpgconf reports an invalid
        configuration

    C - Copy a group to another name
        Copying a group will copy the currently selected keys to a new group.
        You will be prompted for the new name. The name of the new group must
        not already exist. This is similar to a "save as" funciton, however,
        your changes will still need to be saved using the save command.

    D - Delete the current group
        Deleting a group will remove the group from the configuration. You will
        be prompted for confirmation. After confirmation, the editor will save
        and quit.

    Q - Quit the editor
        When quitting the editor, if the groups configration in memory differes
        from the persisted state of the groups, you will be prompted for
        confirmation before loosing your changes.

SEE ALSO
    gpg(1), gpgconf(1)


EOF
}

# fun: die msg
# param: msg: message to display
# txt: print msg to stdout and exit 1
die() {
    printf '%s\n' "$*" >&2
    exit 1
}

# fun: err msg
# param: msg: message to display
# txt: print msg to stdout
err() {
    printf '%s\n' "$*" >&2
}

# fun: pick_group group
# param: group: group to pick
# txt: interactively prompts for group if none selected,
#      and validates that group exists
pick_group()
{
    local group="$1"
    local groups

    if [[ -z "$group" ]]; then
        PS3='Select group: '
        mapfile -t groups < <(cmd_groups);
        select group in "${groups[@]}"; do
            [[ "$group" ]] && break
        done
    fi

    has_group "$group" || die "Invalid group: $group"
    printf "%s" "$group"
}


# fun: pick_key fpr_uids
# param: fpr_uids: "fingerprint uid" lines to choose from
# txt: interactive menu to select a fingerprint.
#      presents uids, outputs a fingerprint or other selection
#      returns 0 if fpr selected, or 1 if other selection
pick_key() {
    local fprs uids choice i

    printf '\n' >&2

    if [[ -z "$1" ]]; then
        printf 'No keys to choose from!\n' >&2
        read -r -p "$PS3"
        printf '%s' "$REPLY"
        return 1;
    fi

    mapfile -t fprs < <(fpr <<< "$1")
    mapfile -t uids < <(uid <<< "$1")

    select choice in "${uids[@]}"; do
        [[ $choice ]] || break
        for i in "${!uids[@]}"
        do
            if [[ "$choice" == "${uids[$i]}" ]]; then
                printf '%s' "${fprs[$i]}"
                return 0
            fi;
        done
    done;
    printf '%s' "$REPLY"
    return 1
}

##################################################
# GPGCONF Methods
##################################################

# fun: cfg_ok
# txt: reads gpgconf response from stdin, displays errors and returns code
cfg_ok()
{
    local name description avail okay cfgfile line error

    while IFS=: read -r name description _ avail okay cfgfile line error; do
        (( avail == 1 )) || err "$description not available"
        (( okay == 1 )) && return 0
        err "Error with $description config: '$error' in $cfgfile on $line"
        return 1
    done
}

# fun: get_conf_value
# txt: prints the "alias list(37)" value for the groups config output
#      see GPGCONF(1)
get_conf_value() {
    local -r conf=$(gpgconf --list-options gpg | grep ^group)
    printf '%s' "${conf##*:}"
}

# fun: set_conf_value string
# param: string: "alias list (37)" formatted value. see GPGCONF(1)
# txt: sets the value fo the groups config output
set_conf_value() {
    printf 'group:0:%s' "$1" |
        gpgconf --change-options gpg
}

# fun: build_conf_value
# glo: group_names member_lists
# txt: builds "alias list (37)" formatted value from current state
#      see GPGCONF(1)
build_conf_value()
{
    local i data;
    for i in "${!group_names[@]}"; do
        data+=$(printf '"%s = %s,' "${group_names[$i]}" "${member_lists[$i]}")
    done
    printf '%s' "${data%?}"
}

# fun: load_data
# glo: group_names member_lists
# txt: loads groups state from config file
load_data()
{
    local name member_list cfg
    cfg=$(get_conf_value)
    while IFS=' =' read -rd, name member_list; do
        group_names+=("${name:1}")
        member_lists+=("$member_list")
    done <<< "$cfg,"
}

# fun: write_data
# txt: writes current group state to config
write_data()
{
    local data revert

    revert=$(get_conf_value)
    data=$(build_conf_value)

    if ! set_conf_value "$data" | cfg_ok ; then
        set_conf_value "$revert"
        err "Failed to update"
    fi
}


##################################################
# Group State Methods
##################################################

# fun: get_group_id name
# param: name: name of group
# glo: group_names
# txt: prints state index of named group
get_group_id(){
    local group=$1
    for i in "${!group_names[@]}"; do
        if [[ "$group" == "${group_names[$i]}" ]]; then
            printf %s "$i"
            return 0
        fi
    done
    return 1
}

# fun: has_group name
# param: name: name of group
# txt: returns 1 if groups does not exist in state
has_group()
{
    get_group_id "$1" > /dev/null
}

# fun: get_members group
# param: group: name of group
# glo: member_lists
# txt: outputs fingerprints of group members
get_members()
{
    local group=$1
    local group_id

    group_id=$(get_group_id "$group") || die "invalid group"
    [[ -z "${member_lists[$group_id]}" ]] && return
    while read -ra members; do
        printf '%s\n' "${members[@]}"
    done <<< "${member_lists[$group_id]}"
}

# fun: set_members group members
# param: group: name of group
# param: members to set
# glo: member_lists
# txt: set members of group in current state
set_members()
{
    local group=$1
    shift
    local members=("$@")
    local group_id

    mapfile -t members < <(printf '%s\n' "${members[@]}" | sort -u)
    group_id=$(get_group_id "$group")
    member_lists[$group_id]=$(printf %s "${members[*]}")
}

# fun: add_member group member
# param: group: name of group
# param: member: fingerprint of member
# txt: add a member to group in current state
add_member()
{
    local group=$1
    local member=$2
    local members

    mapfile -t members < <(get_members "$group")
    members+=("$member")
    set_members "$group" "${members[@]}"
}

# fun: remove_member group member
# param: group: name of group
# param: member: fingerprint of member
# txt: remove a member from group in current state
remove_member()
{
    local group=$1
    local member=$2
    local members i

    mapfile -t members < <(get_members "$group")

    for i in "${!members[@]}"; do
        if [[ "$member" == "${members[$i]}" ]]; then
            unset 'members[i]'
            set_members "$group" "${members[@]}"
            return 0
        fi
    done
    return 1
}

# fun: add_group group
# param: group: name of group
# glo: group_names member_lists
# txt: create a new group in current state
add_group()
{
    local group=$1
    if has_group "$group"; then
        err "$group already exists"
        return 1
    fi
    group_names+=("$group")
    member_lists+=("")
}

# fun: remove_group group
# param: group: name of group
# glo: group_names member_lists
# txt: remove a group form current state
remove_group()
{
    local group=$1
    local group_id

    if ! group_id=$(get_group_id "$group"); then
        err "$group does not exists"
        return 1
    fi
    unset 'group_names[group_id]'
    unset 'member_lists[group_id]'
}

# fun: is_clear
# txt: does current state reflect whats persisted?
is_clean()
{
    [[ "$(get_conf_value)" = "$(build_conf_value)" ]]
}


##################################################
# GPG Key Methods
##################################################

# fun: list_keys query
# param: query: query to search keys with
# txt: outputs gpg public keys in --with-colons format
list_keys() {
    gpg --list-public-keys --with-colons --with-fingerprint "$@"
}

# fun: valid_fpr_uid
# txt: reads --with-colons format from stdin and outputs "fpr uid" format of
#      valid keys and uid
valid_fpr_uid() {
    awk -F: '
        /^pub:/{ VALID = $2};
        /^fpr:/{ FPR = $10 };
        /^uid:/{ if(VALID~/[^ner]/ && $2~/[^ner]/) {print FPR " " $10;} ; }
        '
}

# fun: without_keys fingerprints
# param: fingerprints to remove
# txt: reads fpr_uid format from stdin and remove entries for specififed
#      fingerprints
without_keys() {
    if (("$#")) ; then
        grep -vf <(printf '^%s\n' "$@")
    else
        cat
    fi
}

# fun: uid
# txt: reads fpr_uid format from stdin and outputs uid
uid() {
    cut -d" " -f 2-
}

# fun: fpr
# txt: reads fpr_uid format from stdin and outputs fpr
fpr() {
    cut -d" " -f 1
}


##################################################
# Commands
##################################################

# fun: cmd_groups
# glo: group_names
# txt: list all available groups
cmd_groups() {
    printf '%s\n' "${group_names[@]}"
}


# fun: cmd_show [-f] group
# opt: -f: change output to fingerprints instead of uids
# param: group: name of group to show memebers of
# txt: list members of a group, uid or fingerprint
cmd_show() {
    if [[ "$1" = "-f" ]];
        then display=fpr; shift; else display=uid;
    fi
    group=$(pick_group "$1")
    mapfile -t selected < <(get_members "$group")
    (( ${#selected[@]} > 0 )) &&
        list_keys "${selected[@]}" | valid_fpr_uid | $display
}


# fun: cmd_edit group
# param: group: group to edit
# txt: launch interactive edit group dialog
cmd_edit() {
    group=$(pick_group "$1")

    menu="[A]dd, [S]ave, [C]opy, [D]elete, [Q]uit: "

    while true; do

        mapfile -t selected < <(get_members "$group")

        # determine if group has been saved since editing
        if is_clean; then
            dirty=""; else dirty="*"
        fi

        # header
        printf 'Edit group "%s"%s (%s keys)\n' "$group" "$dirty" ${#selected[@]} >&2

        # config menu
        keys='';
        PS3="$menu"
        if (("${#selected[@]}" > 0)); then
            keys=$(list_keys "${selected[@]}" | valid_fpr_uid)
            PS3="[#] Remove key, $menu"
        fi

        # launch menu
        if fpr=$(pick_key "${keys[@]}"); then
            remove_member "$group" "$fpr"
        else
            # Launch other action
            action="$fpr"
            case "$action" in
                A|a) # Search for and add FPR to group
                    read -r -p 'Search [type "C" to cancel]: ' query
                    [[ "$query" == "C" ]] && continue;
                    found=$(list_keys "$query" |
                        valid_fpr_uid | without_keys "${selected[@]}")
                    if [[ ! -z "$found" ]]; then
                        PS3="Add to $group [C to cancel]: "
                        fpr=$(pick_key "${found[@]}") && add_member "$group" "$fpr"
                    else
                        printf 'No valid key found for "%s"\n' "$query" >&2
                    fi
                    ;;
                S|s) # Save group
                    write_data
                    ;;
                Q|q) # Quit
                    is_clean && exit
                    read -r -p 'Changes not saved! Are you sure? [y/N]: '
                    [[ "$REPLY" = 'y' ]] && exit
                    ;;
                D|d) # Delete group
                    read -r -p "Delete $group? [y/N]: "
                    [[ "$REPLY" = 'y' ]] && remove_group "$group" &&
                        write_data && exit
                    ;;
                C|c) # Copy group
                    name=''
                    while [[ -z "$name" ]] ; do
                        read -r -p "Enter name for new group copy: " name
                        has_group "$name" && unset name
                    done
                    add_group "$name"
                    set_members "$name" "$(get_members "$group")"
                    ;;
                *) printf 'Invalid Choice\n';
            esac
        fi
        printf '\n'
    done;
}


# fun: cmd_new name
# param: group: name of new group
# txt: creates new group and lunches interactive edit
cmd_new() {
    if [[ -z "$1" ]]; then
        read -r -p "Enter name for new group: " name
    else
        name=$1
    fi
    has_group "$name" && die "Group '$name' already exists"
    add_group "$name"
    cmd_edit "$name"
}


##################################################
# Main
##################################################

gpgconf --check-programs | grep ^gpg | cfg_ok ||
    die "GPG has problems"

load_data

cmd="$1"
shift

case "$cmd" in
    -h|--help|help) show_help ;;
    groups)   cmd_groups ;;
    show)     cmd_show "$@";;
    edit)     cmd_edit "$@";;
    new)      cmd_new "$@";;
    *) show_help ;;
esac


